// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int              @id @default(autoincrement())
  email        String           @unique
  name         String?
  workprofile  Workprofile?
  applications JobApplication[]
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
}

// for storing cv, education, skills, experience and cv image
model Workprofile {
  id          Int      @id @default(autoincrement())
  userId      Int      @unique
  education   String?
  skills      String?
  experience  String?
  cvImage     String?
  cvEmbedding String?
  cvOCR       String?
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  JobApplication JobApplication[]
}

model Company {
  id           Int           @id @default(autoincrement())
  name         String
  website      String?
  description  String?
  logo         String?
  joblistings  Joblistings[]
  companyUsers companyUser[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model companyUser {
  id           Int        @id @default(autoincrement())
  email        String     @unique
  name         String?
  companyId    Int
  company      Company    @relation(fields: [companyId], references: [id])
  role         String
  permissionId Int
  permission   permission @relation(fields: [permissionId], references: [id])
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model permission {
  id                 Int           @id @default(autoincrement())
  name               String        @unique
  description        String?
  allowedPermissions String[]
  allowedPaths       String[]
  companyUsers       companyUser[]
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
}

model CrawlSeed {
  id          Int           @id @default(autoincrement())
  parentUrl   String?
  title       String
  url         String        @unique
  joblistings Joblistings[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Joblistings {
  id              Int              @id @default(autoincrement())
  crawlSeedId     Int
  title           String
  company         String?
  location        String?
  description     String?
  url             String           @unique
  salaryMin       String?
  salaryMax       String?
  currency        String?
  employmentType  String?
  experienceLevel String?
  industry        String?
  function        String?
  seniority       String?
  summary         String?
  metaData        String?
  postingDate     DateTime?
  applicationUrl  String?
  embedding       String?
  crawlSeed       CrawlSeed        @relation(fields: [crawlSeedId], references: [id])
  companyId       Int?
  companyInternal Company?         @relation(fields: [companyId], references: [id])
  applications    JobApplication[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

model JobApplication {
  id            Int          @id @default(autoincrement())
  userId        Int
  joblistingId  Int
  status        String       @default("applied") // e.g., applied, interviewing, offered, rejected
  appliedAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  user          User         @relation(fields: [userId], references: [id])
  joblisting    Joblistings  @relation(fields: [joblistingId], references: [id])
  workprofileId Int?
  workprofile   Workprofile? @relation(fields: [workprofileId], references: [id])
}
